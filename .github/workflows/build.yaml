name: build
on:
  push:
    tags:
      - 'release/**'
jobs:
  build-logrotate:
    runs-on: ubuntu-latest
    name: build-logrotate
    if: contains(github.ref, 'release/logrotate')
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: login ecr
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build and push
        env:
          ECR_REPO: 'logrotate'
        run: |
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s@refs/tags/release/logrotate/@@g")
          docker build -t ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG ./logrotate
          docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
  build-basic-auth:
    runs-on: ubuntu-latest
    name: build-basic-auth
    if: contains(github.ref, 'release/basic-auth')
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: login ecr
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build and push
        env:
          ECR_REPO: 'basic-auth'
        run: |
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s@refs/tags/release/basic-auth/@@g")
          docker build -t ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG ./basic-auth
          docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
  build-alpine-tini:
    runs-on: ubuntu-latest
    name: build-basic-auth
    if: contains(github.ref, 'release/alpine-tini')
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: login ecr
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build and push
        env:
          ECR_REPO: 'alpine-tini'
        run: |
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s@refs/tags/release/alpine-tini/@@g")
          docker build -t ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG ./alpine-tini
          docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
  build-graceful-nginx:
    runs-on: ubuntu-latest
    name: build-graceful-nginx
    if: contains(github.ref, 'release/graceful-nginx')
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: login ecr
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build and push
        env:
          ECR_REPO: 'graceful-nginx'
        run: |
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s@refs/tags/release/graceful-nginx/@@g")
          docker build -t ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG ./graceful-nginx
          docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
  build-nginx-lua:
    runs-on: ubuntu-latest
    name: build-nginx-lua
    if: contains(github.ref, 'release/nginx-lua')
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: login ecr
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build and push
        env:
          ECR_REPO: 'nginx-lua'
        run: |
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s@refs/tags/release/nginx-lua/@@g")
          docker build --build-arg ENABLED_MODULES="ndk lua" -t ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG ./nginx-lua
          docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
